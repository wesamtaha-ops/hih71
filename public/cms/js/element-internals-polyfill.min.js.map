{"version":3,"sources":["js\\element-internals-polyfill.js"],"names":["refMap","WeakMap","validityMap","hiddenInputMap","internalsMap","validationMessageMap","formsMap","shadowHostsMap","formElementsMap","refValueMap","upgradeMap","shadowRootMap","validationAnchorMap","documentFragmentMap","observerConfig$1","attributes","attributeFilter","observer","MutationObserver","mutationsList","mutation","target","constructor","isDisabled","hasAttribute","toggleAttribute","setAttribute","removeAttribute","formDisabledCallback","apply","removeHiddenInputs","internals","get","forEach","hiddenInput","remove","set","createHiddenInput","ref","input","document","createElement","type","name","getAttribute","after","push","initLabels","labels","length","Array","from","label","addEventListener","click","bind","firstLabelId","id","htmlFor","setFormValidity","form","nativeControlValidity","elements","filter","element","validity","map","valid","polyfilledElements","hasInvalid","control","isConnected","includes","formInputCallback","event","findParentForm","formChangeCallback","formResetCallback","size","formAssociated","initForm","formElements","add","initSet","Set","SUBMIT_BUTTON_SELECTOR","submitButtonSelector","closest","noValidate","reverse","node","reportValidity","preventDefault","wireSubmitLogic","formAssociatedCallback","setTimeout","elem","parent","parentNode","tagName","throwIfNotFormAssociated","message","ErrorType","DOMException","overrideFormMethod","returnValue","method","upgradeInternals","aom","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","ValidityState","[object Object]","this","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","Object","seal","isValid","validityState","key","initNode","observerCallback","mutationList","mutationRecord","addedNodes","removedNodes","added","removed","has","keys","delete","localName","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","FILTER_SKIP","FILTER_ACCEPT","current","nextNode","disconnect","fragmentObserverCallback","observerConfig","childList","subtree","customStateMap","CustomStateSet","isPolyfilled","super","indexOf","TypeError","state","test","result","part","entry","entries","clear","ElementInternals","rootNode","getRootNode","states","closureValue","attributeName","defineProperty","value","initAom","observe","initRef","DocumentFragment","fragment","deferUpgrade","willValidate","validityEvent","Event","bubbles","cancelable","composed","dispatchEvent","hostRoot","querySelectorAll","checkValidity","anchor","focus","FormData","formDataKey","formDataValue","validityChanges","validationMessage","validityChangesObj","validityObject","check","newState","reconcileValidity","shadowRoot","disabled","window","HTMLElement","prototype","attachInternals","ElementInternalsFeatureDetection","randomName","Math","random","toString","replace","customElements","define","featureDetectionElement","every","prop","isElementInternalsSupported","args","call","Error","attachShadow","Element","ShadyDOM","documentElement","HTMLFormElement"],"mappings":"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","sourcesContent":["(function () {\n    'use strict';\n\n    const refMap = new WeakMap();\n    const validityMap = new WeakMap();\n    const hiddenInputMap = new WeakMap();\n    const internalsMap = new WeakMap();\n    const validationMessageMap = new WeakMap();\n    const formsMap = new WeakMap();\n    const shadowHostsMap = new WeakMap();\n    const formElementsMap = new WeakMap();\n    const refValueMap = new WeakMap();\n    const upgradeMap = new WeakMap();\n    const shadowRootMap = new WeakMap();\n    const validationAnchorMap = new WeakMap();\n    const documentFragmentMap = new WeakMap();\n\n    const observerConfig$1 = { attributes: true, attributeFilter: ['disabled'] };\n    const observer = new MutationObserver((mutationsList) => {\n        for (const mutation of mutationsList) {\n            const target = mutation.target;\n            if (target.constructor['formAssociated']) {\n                const isDisabled = target.hasAttribute('disabled');\n                target.toggleAttribute('internals-disabled', isDisabled);\n                if (isDisabled) {\n                    target.setAttribute('aria-disabled', 'true');\n                }\n                else {\n                    target.removeAttribute('aria-disabled');\n                }\n                if (target.formDisabledCallback) {\n                    target.formDisabledCallback.apply(target, [isDisabled]);\n                }\n            }\n        }\n    });\n    const removeHiddenInputs = (internals) => {\n        const hiddenInputs = hiddenInputMap.get(internals);\n        hiddenInputs.forEach(hiddenInput => {\n            hiddenInput.remove();\n        });\n        hiddenInputMap.set(internals, []);\n    };\n    const createHiddenInput = (ref, internals) => {\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = ref.getAttribute('name');\n        ref.after(input);\n        hiddenInputMap.get(internals).push(input);\n        return input;\n    };\n    const initRef = (ref, internals) => {\n        hiddenInputMap.set(internals, []);\n        const isDisabled = ref.hasAttribute('disabled');\n        ref.toggleAttribute('internals-disabled', isDisabled);\n        observer.observe(ref, observerConfig$1);\n    };\n    const initLabels = (ref, labels) => {\n        if (labels.length) {\n            Array.from(labels).forEach(label => label.addEventListener('click', ref.click.bind(ref)));\n            let firstLabelId = labels[0].id;\n            if (!labels[0].id) {\n                firstLabelId = `${labels[0].htmlFor}_Label`;\n                labels[0].id = firstLabelId;\n            }\n            ref.setAttribute('aria-labelledby', firstLabelId);\n        }\n    };\n    const setFormValidity = (form) => {\n        const nativeControlValidity = Array.from(form.elements)\n            .filter((element) => element.validity)\n            .map((element) => element.validity.valid);\n        const polyfilledElements = formElementsMap.get(form) || [];\n        const polyfilledValidity = Array.from(polyfilledElements)\n            .filter(control => control.isConnected)\n            .map((control) => internalsMap.get(control).validity.valid);\n        const hasInvalid = [...nativeControlValidity, ...polyfilledValidity].includes(false);\n        form.toggleAttribute('internals-invalid', hasInvalid);\n        form.toggleAttribute('internals-valid', !hasInvalid);\n    };\n    const formInputCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formChangeCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const wireSubmitLogic = (form) => {\n        const SUBMIT_BUTTON_SELECTOR = ':is(:is(button, input)[type=submit], button:not([type])):not([disabled])';\n        let submitButtonSelector = `${SUBMIT_BUTTON_SELECTOR}:not([form])`;\n        if (form.id) {\n            submitButtonSelector += `,${SUBMIT_BUTTON_SELECTOR}[form='${form.id}']`;\n        }\n        form.addEventListener('click', event => {\n            const target = event.target;\n            if (target.closest(submitButtonSelector)) {\n                const elements = formElementsMap.get(form);\n                if (form.noValidate) {\n                    return;\n                }\n                if (elements.size) {\n                    const nodes = Array.from(elements);\n                    const validityList = nodes\n                        .reverse()\n                        .map(node => {\n                        const internals = internalsMap.get(node);\n                        return internals.reportValidity();\n                    });\n                    if (validityList.includes(false)) {\n                        event.preventDefault();\n                    }\n                }\n            }\n        });\n    };\n    const formResetCallback = (event) => {\n        const elements = formElementsMap.get(event.target);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                if (element.constructor.formAssociated && element.formResetCallback) {\n                    element.formResetCallback.apply(element);\n                }\n            });\n        }\n    };\n    const initForm = (ref, form, internals) => {\n        if (form) {\n            const formElements = formElementsMap.get(form);\n            if (formElements) {\n                formElements.add(ref);\n            }\n            else {\n                const initSet = new Set();\n                initSet.add(ref);\n                formElementsMap.set(form, initSet);\n                wireSubmitLogic(form);\n                form.addEventListener('reset', formResetCallback);\n                form.addEventListener('input', formInputCallback);\n                form.addEventListener('change', formChangeCallback);\n            }\n            formsMap.set(form, { ref, internals });\n            if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\n                setTimeout(() => {\n                    ref.formAssociatedCallback.apply(ref, [form]);\n                }, 0);\n            }\n            setFormValidity(form);\n        }\n    };\n    const findParentForm = (elem) => {\n        let parent = elem.parentNode;\n        if (parent && parent.tagName !== 'FORM') {\n            parent = findParentForm(parent);\n        }\n        return parent;\n    };\n    const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\n        if (!ref.constructor['formAssociated']) {\n            throw new ErrorType(message);\n        }\n    };\n    const overrideFormMethod = (form, returnValue, method) => {\n        const elements = formElementsMap.get(form);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                const internals = internalsMap.get(element);\n                const valid = internals[method]();\n                if (!valid) {\n                    returnValue = false;\n                }\n            });\n        }\n        return returnValue;\n    };\n    const upgradeInternals = (ref) => {\n        if (ref.constructor['formAssociated']) {\n            const internals = internalsMap.get(ref);\n            const { labels, form } = internals;\n            initLabels(ref, labels);\n            initForm(ref, form, internals);\n        }\n    };\n\n    const aom = {\n        ariaAtomic: 'aria-atomic',\n        ariaAutoComplete: 'aria-autocomplete',\n        ariaBusy: 'aria-busy',\n        ariaChecked: 'aria-checked',\n        ariaColCount: 'aria-colcount',\n        ariaColIndex: 'aria-colindex',\n        ariaColSpan: 'aria-colspan',\n        ariaCurrent: 'aria-current',\n        ariaDisabled: 'aria-disabled',\n        ariaExpanded: 'aria-expanded',\n        ariaHasPopup: 'aria-haspopup',\n        ariaHidden: 'aria-hidden',\n        ariaKeyShortcuts: 'aria-keyshortcuts',\n        ariaLabel: 'aria-label',\n        ariaLevel: 'aria-level',\n        ariaLive: 'aria-live',\n        ariaModal: 'aria-modal',\n        ariaMultiLine: 'aria-multiline',\n        ariaMultiSelectable: 'aria-multiselectable',\n        ariaOrientation: 'aria-orientation',\n        ariaPlaceholder: 'aria-placeholder',\n        ariaPosInSet: 'aria-posinset',\n        ariaPressed: 'aria-pressed',\n        ariaReadOnly: 'aria-readonly',\n        ariaRelevant: 'aria-relevant',\n        ariaRequired: 'aria-required',\n        ariaRoleDescription: 'aria-roledescription',\n        ariaRowCount: 'aria-rowcount',\n        ariaRowIndex: 'aria-rowindex',\n        ariaRowSpan: 'aria-rowspan',\n        ariaSelected: 'aria-selected',\n        ariaSetSize: 'aria-setsize',\n        ariaSort: 'aria-sort',\n        ariaValueMax: 'aria-valuemax',\n        ariaValueMin: 'aria-valuemin',\n        ariaValueNow: 'aria-valuenow',\n        ariaValueText: 'aria-valuetext',\n        role: 'role'\n    };\n    const initAom = (ref, internals) => {\n        for (let key in aom) {\n            internals[key] = null;\n            let closureValue = null;\n            const attributeName = aom[key];\n            Object.defineProperty(internals, key, {\n                get() {\n                    return closureValue;\n                },\n                set(value) {\n                    closureValue = value;\n                    if (ref.isConnected) {\n                        ref.setAttribute(attributeName, value);\n                    }\n                    else {\n                        upgradeMap.set(ref, internals);\n                    }\n                }\n            });\n        }\n    };\n\n    class ValidityState {\n        constructor() {\n            this.badInput = false;\n            this.customError = false;\n            this.patternMismatch = false;\n            this.rangeOverflow = false;\n            this.rangeUnderflow = false;\n            this.stepMismatch = false;\n            this.tooLong = false;\n            this.tooShort = false;\n            this.typeMismatch = false;\n            this.valid = true;\n            this.valueMissing = false;\n            Object.seal(this);\n        }\n    }\n    const setValid = (validityObject) => {\n        validityObject.badInput = false;\n        validityObject.customError = false;\n        validityObject.patternMismatch = false;\n        validityObject.rangeOverflow = false;\n        validityObject.rangeUnderflow = false;\n        validityObject.stepMismatch = false;\n        validityObject.tooLong = false;\n        validityObject.tooShort = false;\n        validityObject.typeMismatch = false;\n        validityObject.valid = true;\n        validityObject.valueMissing = false;\n        return validityObject;\n    };\n    const reconcileValidity = (validityObject, newState, form) => {\n        validityObject.valid = isValid(newState);\n        Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\n        if (form) {\n            setFormValidity(form);\n        }\n        return validityObject;\n    };\n    const isValid = (validityState) => {\n        let valid = true;\n        for (let key in validityState) {\n            if (key !== 'valid' && validityState[key] !== false) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n\n    function initNode(node) {\n        const internals = internalsMap.get(node);\n        const { form } = internals;\n        initForm(node, form, internals);\n        initLabels(node, internals.labels);\n    }\n    function observerCallback(mutationList) {\n        mutationList.forEach(mutationRecord => {\n            const { addedNodes, removedNodes } = mutationRecord;\n            const added = Array.from(addedNodes);\n            const removed = Array.from(removedNodes);\n            added.forEach(node => {\n                if (internalsMap.has(node) && node.constructor['formAssociated']) {\n                    initNode(node);\n                }\n                if (upgradeMap.has(node)) {\n                    const internals = upgradeMap.get(node);\n                    const aomKeys = Object.keys(aom);\n                    aomKeys\n                        .filter(key => internals[key] !== null)\n                        .forEach(key => {\n                        node.setAttribute(aom[key], internals[key]);\n                    });\n                    upgradeMap.delete(node);\n                }\n                if (node.localName === 'form') {\n                    const formElements = formElementsMap.get(node);\n                    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n                        acceptNode(node) {\n                            return internalsMap.has(node) && !(formElements && formElements.has(node)) ?\n                                NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n                        }\n                    });\n                    let current = walker.nextNode();\n                    while (current) {\n                        initNode(current);\n                        current = walker.nextNode();\n                    }\n                }\n            });\n            removed.forEach(node => {\n                const internals = internalsMap.get(node);\n                if (internals && hiddenInputMap.get(internals)) {\n                    removeHiddenInputs(internals);\n                }\n                if (shadowHostsMap.has(node)) {\n                    const observer = shadowHostsMap.get(node);\n                    observer.disconnect();\n                }\n            });\n        });\n    }\n    function fragmentObserverCallback(mutationList) {\n        mutationList.forEach(mutation => {\n            const { removedNodes } = mutation;\n            removedNodes.forEach(node => {\n                const observer = documentFragmentMap.get(mutation.target);\n                if (internalsMap.has(node)) {\n                    upgradeInternals(node);\n                }\n                observer.disconnect();\n            });\n        });\n    }\n    const deferUpgrade = (fragment) => {\n        const observer = new MutationObserver(fragmentObserverCallback);\n        observer.observe(fragment, { childList: true });\n        documentFragmentMap.set(fragment, observer);\n    };\n    new MutationObserver(observerCallback);\n    const observerConfig = {\n        childList: true,\n        subtree: true\n    };\n\n    const customStateMap = new WeakMap();\n    class CustomStateSet extends Set {\n        static get isPolyfilled() {\n            return true;\n        }\n        constructor(ref) {\n            super();\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            customStateMap.set(this, ref);\n        }\n        add(state) {\n            if (!/^--/.test(state) || typeof state !== 'string') {\n                throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\n            }\n            const result = super.add(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, true);\n            if (ref.part) {\n                ref.part.add(`state${state}`);\n            }\n            return result;\n        }\n        clear() {\n            for (let [entry] of this.entries()) {\n                this.delete(entry);\n            }\n            super.clear();\n        }\n        delete(state) {\n            const result = super.delete(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, false);\n            if (ref.part) {\n                ref.part.remove(`state${state}`);\n            }\n            return result;\n        }\n    }\n\n    class ElementInternals {\n        constructor(ref) {\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            const rootNode = ref.getRootNode();\n            const validity = new ValidityState();\n            this.states = new CustomStateSet(ref);\n            refMap.set(this, ref);\n            validityMap.set(this, validity);\n            internalsMap.set(ref, this);\n            initAom(ref, this);\n            initRef(ref, this);\n            Object.seal(this);\n            upgradeInternals(ref);\n            if (rootNode instanceof DocumentFragment) {\n                deferUpgrade(rootNode);\n            }\n        }\n        static get isPolyfilled() {\n            return true;\n        }\n        checkValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const validity = validityMap.get(this);\n            if (!validity.valid) {\n                const validityEvent = new Event('invalid', {\n                    bubbles: false,\n                    cancelable: true,\n                    composed: false\n                });\n                ref.dispatchEvent(validityEvent);\n            }\n            return validity.valid;\n        }\n        get form() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            let form;\n            if (ref.constructor['formAssociated'] === true) {\n                form = findParentForm(ref);\n            }\n            return form;\n        }\n        get labels() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const id = ref.getAttribute('id');\n            const hostRoot = ref.getRootNode();\n            if (hostRoot && id) {\n                return hostRoot.querySelectorAll(`[for=\"${id}\"]`);\n            }\n            return [];\n        }\n        reportValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const valid = this.checkValidity();\n            const anchor = validationAnchorMap.get(this);\n            if (anchor && !ref.constructor['formAssociated']) {\n                throw new DOMException(`Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            }\n            if (!valid && anchor) {\n                ref.focus();\n                anchor.focus();\n            }\n            return valid;\n        }\n        setFormValue(value) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            removeHiddenInputs(this);\n            if (value != null && !(value instanceof FormData)) {\n                if (ref.getAttribute('name')) {\n                    const hiddenInput = createHiddenInput(ref, this);\n                    hiddenInput.value = value;\n                }\n            }\n            else if (value != null && value instanceof FormData) {\n                Array.from(value).reverse().forEach(([formDataKey, formDataValue]) => {\n                    if (typeof formDataValue === 'string') {\n                        const hiddenInput = createHiddenInput(ref, this);\n                        hiddenInput.name = formDataKey;\n                        hiddenInput.value = formDataValue;\n                    }\n                });\n            }\n            refValueMap.set(ref, value);\n        }\n        setValidity(validityChanges, validationMessage, anchor) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!validityChanges) {\n                throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\n            }\n            validationAnchorMap.set(this, anchor);\n            const validity = validityMap.get(this);\n            const validityChangesObj = {};\n            for (const key in validityChanges) {\n                validityChangesObj[key] = validityChanges[key];\n            }\n            if (Object.keys(validityChangesObj).length === 0) {\n                setValid(validity);\n            }\n            const check = { ...validity, ...validityChangesObj };\n            delete check.valid;\n            const { valid } = reconcileValidity(validity, check, this.form);\n            if (!valid && !validationMessage) {\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\n            }\n            validationMessageMap.set(this, valid ? '' : validationMessage);\n            ref.toggleAttribute('internals-invalid', !valid);\n            ref.toggleAttribute('internals-valid', valid);\n            ref.setAttribute('aria-invalid', `${!valid}`);\n        }\n        get shadowRoot() {\n            const ref = refMap.get(this);\n            const shadowRoot = shadowRootMap.get(ref);\n            if (shadowRoot) {\n                return shadowRoot;\n            }\n            return null;\n        }\n        get validationMessage() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            return validationMessageMap.get(this);\n        }\n        get validity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const validity = validityMap.get(this);\n            return validity;\n        }\n        get willValidate() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            if ((ref.disabled || ref.hasAttribute('disabled')) ||\n                ref.hasAttribute('readonly')) {\n                return false;\n            }\n            return true;\n        }\n    }\n    function isElementInternalsSupported() {\n        if (!window.ElementInternals || !HTMLElement.prototype.attachInternals) {\n            return false;\n        }\n        class ElementInternalsFeatureDetection extends HTMLElement {\n            constructor() {\n                super();\n                this.internals = this.attachInternals();\n            }\n        }\n        const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\n        customElements.define(randomName, ElementInternalsFeatureDetection);\n        const featureDetectionElement = new ElementInternalsFeatureDetection();\n        return [\n            'shadowRoot',\n            'form',\n            'willValidate',\n            'validity',\n            'validationMessage',\n            'labels',\n            'setFormValue',\n            'setValidity',\n            'checkValidity',\n            'reportValidity'\n        ].every(prop => prop in featureDetectionElement.internals);\n    }\n    if (!isElementInternalsSupported()) {\n        window.ElementInternals = ElementInternals;\n        function attachShadowObserver(...args) {\n            const shadowRoot = attachShadow.apply(this, args);\n            const observer = new MutationObserver(observerCallback);\n            shadowRootMap.set(this, shadowRoot);\n            if (window.ShadyDOM) {\n                observer.observe(this, observerConfig);\n            }\n            else {\n                observer.observe(shadowRoot, observerConfig);\n            }\n            shadowHostsMap.set(this, observer);\n            return shadowRoot;\n        }\n        function checkValidityOverride(...args) {\n            let returnValue = checkValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'checkValidity');\n        }\n        function reportValidityOverride(...args) {\n            let returnValue = reportValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'reportValidity');\n        }\n        HTMLElement.prototype.attachInternals = function () {\n            if (!this.tagName) {\n                return {};\n            }\n            else if (this.tagName.indexOf('-') === -1) {\n                throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\n            }\n            if (internalsMap.has(this)) {\n                throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\n            }\n            return new ElementInternals(this);\n        };\n        const attachShadow = Element.prototype.attachShadow;\n        Element.prototype.attachShadow = attachShadowObserver;\n        const documentObserver = new MutationObserver(observerCallback);\n        documentObserver.observe(document.documentElement, observerConfig);\n        const checkValidity = HTMLFormElement.prototype.checkValidity;\n        HTMLFormElement.prototype.checkValidity = checkValidityOverride;\n        const reportValidity = HTMLFormElement.prototype.reportValidity;\n        HTMLFormElement.prototype.reportValidity = reportValidityOverride;\n        if (!window.CustomStateSet) {\n            window.CustomStateSet = CustomStateSet;\n        }\n    }\n    else if (!window.CustomStateSet) {\n        window.CustomStateSet = CustomStateSet;\n        const attachInternals = HTMLElement.prototype.attachInternals;\n        HTMLElement.prototype.attachInternals = function (...args) {\n            const internals = attachInternals.call(this, args);\n            internals.states = new CustomStateSet(this);\n            return internals;\n        };\n    }\n\n}());\n"]}